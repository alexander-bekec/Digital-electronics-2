
i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  0000045c  000004f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000045c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  008001c6  008001c6  000005b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e86  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000913  00000000  00000000  0000156e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ce  00000000  00000000  00001e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000545  00000000  00000000  00002734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000550  00000000  00000000  00002c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000031c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_18>
  4c:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3c       	cpi	r26, 0xC6	; 198
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 ec       	ldi	r26, 0xC6	; 198
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 2c 02 	jmp	0x458	; 0x458 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 31 01 	call	0x262	; 0x262 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 ba 01 	call	0x374	; 0x374 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8a 7f       	andi	r24, 0xFA	; 250
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <uart_puts>
    uart_puts("\r\n");
  d6:	8d e1       	ldi	r24, 0x1D	; 29
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <uart_puts>
    uart_puts("\r\n      .0 .1 .2 .3 .4 ");
  de:	80 e2       	ldi	r24, 0x20	; 32
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <uart_puts>
    //uart_puts(".5 .6 .7 .8 .9 .a .b .c .d .e .f");
    uart_puts("\r\n0x0.: RA RA RA RA RA RA RA RA ");
  e6:	88 e3       	ldi	r24, 0x38	; 56
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <uart_puts>
  ee:	ff cf       	rjmp	.-2      	; 0xee <main+0x48>

000000f0 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	1f 93       	push	r17
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	4f 93       	push	r20
 102:	5f 93       	push	r21
 104:	6f 93       	push	r22
 106:	7f 93       	push	r23
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	af 93       	push	r26
 10e:	bf 93       	push	r27
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	28 97       	sbiw	r28, 0x08	; 8
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61
    
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 7;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string_line[] = "000";     // String for converting numbers by itoa()
 122:	20 e3       	ldi	r18, 0x30	; 48
 124:	30 e3       	ldi	r19, 0x30	; 48
 126:	3a 83       	std	Y+2, r19	; 0x02
 128:	29 83       	std	Y+1, r18	; 0x01
 12a:	80 e3       	ldi	r24, 0x30	; 48
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	9c 83       	std	Y+4, r25	; 0x04
 130:	8b 83       	std	Y+3, r24	; 0x03
    char uart_string[] = "000";
 132:	3e 83       	std	Y+6, r19	; 0x06
 134:	2d 83       	std	Y+5, r18	; 0x05
 136:	98 87       	std	Y+8, r25	; 0x08
 138:	8f 83       	std	Y+7, r24	; 0x07
        uart_puts("\n\r");
        }
    */
    
    // FSM
    switch (state)
 13a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state.1964>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	69 f1       	breq	.+90     	; 0x19c <__vector_13+0xac>
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	09 f4       	brne	.+2      	; 0x148 <__vector_13+0x58>
 146:	5b c0       	rjmp	.+182    	; 0x1fe <__vector_13+0x10e>
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	09 f0       	breq	.+2      	; 0x14e <__vector_13+0x5e>
 14c:	6d c0       	rjmp	.+218    	; 0x228 <__vector_13+0x138>
    {
    // Increment I2C slave address
    case STATE_IDLE:
        addr++;
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	98 0f       	add	r25, r24
 156:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
        // If slave address is between 8 and 119 then move to SEND state
        if (addr > 7 && addr < 120) {
 15a:	87 50       	subi	r24, 0x07	; 7
 15c:	80 37       	cpi	r24, 0x70	; 112
 15e:	38 f4       	brcc	.+14     	; 0x16e <__vector_13+0x7e>
            state = STATE_SEND;
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
            addr = 7;
            state = STATE_IDLE;
            
        }
        
        if (addr == 7) {
 166:	97 30       	cpi	r25, 0x07	; 7
 168:	09 f0       	breq	.+2      	; 0x16c <__vector_13+0x7c>
 16a:	61 c0       	rjmp	.+194    	; 0x22e <__vector_13+0x13e>
 16c:	06 c0       	rjmp	.+12     	; 0x17a <__vector_13+0x8a>
        // If slave address is between 8 and 119 then move to SEND state
        if (addr > 7 && addr < 120) {
            state = STATE_SEND;
        }
        else {
            addr = 7;
 16e:	87 e0       	ldi	r24, 0x07	; 7
 170:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            state = STATE_IDLE;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
            
        }
        
        if (addr == 7) {
            uart_puts("RA RA");
 17a:	89 e5       	ldi	r24, 0x59	; 89
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <uart_puts>
            uart_puts("\r\n");
 182:	8d e1       	ldi	r24, 0x1D	; 29
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <uart_puts>
            uart_puts("\r\n      .0 .1 .2 .3 .4 .5 .6 .7 .8 .9 .a .b .c .d .e .f");
 18a:	8f e5       	ldi	r24, 0x5F	; 95
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <uart_puts>
            uart_puts("\n\r0x0.: RA RA RA RA RA RA RA RA ");
 192:	87 e9       	ldi	r24, 0x97	; 151
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <uart_puts>
 19a:	49 c0       	rjmp	.+146    	; 0x22e <__vector_13+0x13e>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1a0:	88 0f       	add	r24, r24
 1a2:	0e 94 40 01 	call	0x280	; 0x280 <twi_start>
 1a6:	18 2f       	mov	r17, r24
        twi_stop();
 1a8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <twi_stop>
        /* Test result from I2C bus. If it is 0 then move to ACK state, 
         * otherwise move to IDLE */
        if (addr % 16 == 0) {
 1ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b0:	8f 70       	andi	r24, 0x0F	; 15
 1b2:	b9 f4       	brne	.+46     	; 0x1e2 <__vector_13+0xf2>
            uart_puts("\n\r0x");
 1b4:	88 eb       	ldi	r24, 0xB8	; 184
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <uart_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1c0:	82 95       	swap	r24
 1c2:	8f 70       	andi	r24, 0x0F	; 15
 1c4:	40 e1       	ldi	r20, 0x10	; 16
 1c6:	be 01       	movw	r22, r28
 1c8:	6f 5f       	subi	r22, 0xFF	; 255
 1ca:	7f 4f       	sbci	r23, 0xFF	; 255
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__itoa_ncheck>
            itoa(addr / 16, uart_string_line, 16);
            uart_puts(uart_string_line);
 1d2:	ce 01       	movw	r24, r28
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <uart_puts>
            uart_puts(".: ");
 1da:	8d eb       	ldi	r24, 0xBD	; 189
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <uart_puts>
        }
        
        if (result == 0) {
 1e2:	11 11       	cpse	r17, r1
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <__vector_13+0xfe>
            state = STATE_ACK;
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 1ec:	20 c0       	rjmp	.+64     	; 0x22e <__vector_13+0x13e>
            
            
        }
        else {
            state = STATE_IDLE;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
            uart_puts("-- ");
 1f4:	81 ec       	ldi	r24, 0xC1	; 193
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <uart_puts>
 1fc:	18 c0       	rjmp	.+48     	; 0x22e <__vector_13+0x13e>
 1fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 202:	40 e1       	ldi	r20, 0x10	; 16
 204:	be 01       	movw	r22, r28
 206:	6b 5f       	subi	r22, 0xFB	; 251
 208:	7f 4f       	sbci	r23, 0xFF	; 255
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__itoa_ncheck>

    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
        itoa(addr, uart_string, 16);
        uart_puts(uart_string);
 210:	ce 01       	movw	r24, r28
 212:	05 96       	adiw	r24, 0x05	; 5
 214:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <uart_puts>
        uart_puts(" ");
 218:	83 ec       	ldi	r24, 0xC3	; 195
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <uart_puts>
        uart_puts(uart_string_bin);
        uart_puts("]");
        uart_puts("\n\r");
        */
               
        state = STATE_IDLE;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
 226:	03 c0       	rjmp	.+6      	; 0x22e <__vector_13+0x13e>
        
    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
    }
 22e:	28 96       	adiw	r28, 0x08	; 8
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	1f 91       	pop	r17
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 262:	87 b1       	in	r24, 0x07	; 7
 264:	8f 7c       	andi	r24, 0xCF	; 207
 266:	87 b9       	out	0x07, r24	; 7
 268:	88 b1       	in	r24, 0x08	; 8
 26a:	80 63       	ori	r24, 0x30	; 48
 26c:	88 b9       	out	0x08, r24	; 8
 26e:	e9 eb       	ldi	r30, 0xB9	; 185
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	8c 7f       	andi	r24, 0xFC	; 252
 276:	80 83       	st	Z, r24
 278:	88 e9       	ldi	r24, 0x98	; 152
 27a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 27e:	08 95       	ret

00000280 <twi_start>:
 280:	94 ea       	ldi	r25, 0xA4	; 164
 282:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 286:	ec eb       	ldi	r30, 0xBC	; 188
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	90 81       	ld	r25, Z
 28c:	99 23       	and	r25, r25
 28e:	ec f7       	brge	.-6      	; 0x28a <twi_start+0xa>
 290:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 294:	84 e8       	ldi	r24, 0x84	; 132
 296:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 29a:	ec eb       	ldi	r30, 0xBC	; 188
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	88 23       	and	r24, r24
 2a2:	ec f7       	brge	.-6      	; 0x29e <twi_start+0x1e>
 2a4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 2a8:	98 7f       	andi	r25, 0xF8	; 248
 2aa:	98 31       	cpi	r25, 0x18	; 24
 2ac:	29 f0       	breq	.+10     	; 0x2b8 <twi_start+0x38>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 34       	cpi	r25, 0x40	; 64
 2b2:	19 f4       	brne	.+6      	; 0x2ba <twi_start+0x3a>
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	08 95       	ret

000002bc <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 2bc:	84 e9       	ldi	r24, 0x94	; 148
 2be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2c2:	08 95       	ret

000002c4 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	2f 93       	push	r18
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31
 2d8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 2dc:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2e0:	8c 71       	andi	r24, 0x1C	; 28
 2e2:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <UART_RxHead>
 2e6:	ef 5f       	subi	r30, 0xFF	; 255
 2e8:	ef 71       	andi	r30, 0x1F	; 31
 2ea:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <UART_RxTail>
 2ee:	e9 17       	cp	r30, r25
 2f0:	39 f0       	breq	.+14     	; 0x300 <__vector_18+0x3c>
 2f2:	e0 93 c8 01 	sts	0x01C8, r30	; 0x8001c8 <UART_RxHead>
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	e5 53       	subi	r30, 0x35	; 53
 2fa:	fe 4f       	sbci	r31, 0xFE	; 254
 2fc:	20 83       	st	Z, r18
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <__vector_18+0x3e>
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <__data_end>
 306:	89 2b       	or	r24, r25
 308:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <__data_end>
 30c:	ff 91       	pop	r31
 30e:	ef 91       	pop	r30
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	2f 91       	pop	r18
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <__vector_19>:
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	8f 93       	push	r24
 32c:	9f 93       	push	r25
 32e:	ef 93       	push	r30
 330:	ff 93       	push	r31
 332:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <UART_TxHead>
 336:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <UART_TxTail>
 33a:	98 17       	cp	r25, r24
 33c:	69 f0       	breq	.+26     	; 0x358 <__vector_19+0x38>
 33e:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <UART_TxTail>
 342:	ef 5f       	subi	r30, 0xFF	; 255
 344:	ef 71       	andi	r30, 0x1F	; 31
 346:	e0 93 c9 01 	sts	0x01C9, r30	; 0x8001c9 <UART_TxTail>
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	e5 51       	subi	r30, 0x15	; 21
 34e:	fe 4f       	sbci	r31, 0xFE	; 254
 350:	80 81       	ld	r24, Z
 352:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 356:	05 c0       	rjmp	.+10     	; 0x362 <__vector_19+0x42>
 358:	e1 ec       	ldi	r30, 0xC1	; 193
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	8f 7d       	andi	r24, 0xDF	; 223
 360:	80 83       	st	Z, r24
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <uart_init>:
 374:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <UART_TxHead>
 378:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <UART_TxTail>
 37c:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <UART_RxHead>
 380:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <UART_RxTail>
 384:	99 23       	and	r25, r25
 386:	1c f4       	brge	.+6      	; 0x38e <uart_init+0x1a>
 388:	22 e0       	ldi	r18, 0x02	; 2
 38a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 38e:	90 78       	andi	r25, 0x80	; 128
 390:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 394:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 398:	88 e9       	ldi	r24, 0x98	; 152
 39a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 39e:	86 e0       	ldi	r24, 0x06	; 6
 3a0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 3a4:	08 95       	ret

000003a6 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 3a6:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <UART_TxHead>
 3aa:	2f 5f       	subi	r18, 0xFF	; 255
 3ac:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 3ae:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <UART_TxTail>
 3b2:	29 17       	cp	r18, r25
 3b4:	e1 f3       	breq	.-8      	; 0x3ae <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 3b6:	e2 2f       	mov	r30, r18
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	e5 51       	subi	r30, 0x15	; 21
 3bc:	fe 4f       	sbci	r31, 0xFE	; 254
 3be:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 3c0:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 3c4:	e1 ec       	ldi	r30, 0xC1	; 193
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	80 62       	ori	r24, 0x20	; 32
 3cc:	80 83       	st	Z, r24
 3ce:	08 95       	ret

000003d0 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	ec 01       	movw	r28, r24
    while (*s)
 3d6:	88 81       	ld	r24, Y
 3d8:	88 23       	and	r24, r24
 3da:	31 f0       	breq	.+12     	; 0x3e8 <uart_puts+0x18>
 3dc:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 3de:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 3e2:	89 91       	ld	r24, Y+
 3e4:	81 11       	cpse	r24, r1
 3e6:	fb cf       	rjmp	.-10     	; 0x3de <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <__itoa_ncheck>:
 3ee:	bb 27       	eor	r27, r27
 3f0:	4a 30       	cpi	r20, 0x0A	; 10
 3f2:	31 f4       	brne	.+12     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f4:	99 23       	and	r25, r25
 3f6:	22 f4       	brpl	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
 3f8:	bd e2       	ldi	r27, 0x2D	; 45
 3fa:	90 95       	com	r25
 3fc:	81 95       	neg	r24
 3fe:	9f 4f       	sbci	r25, 0xFF	; 255
 400:	0c 94 03 02 	jmp	0x406	; 0x406 <__utoa_common>

00000404 <__utoa_ncheck>:
 404:	bb 27       	eor	r27, r27

00000406 <__utoa_common>:
 406:	fb 01       	movw	r30, r22
 408:	55 27       	eor	r21, r21
 40a:	aa 27       	eor	r26, r26
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	aa 1f       	adc	r26, r26
 412:	a4 17       	cp	r26, r20
 414:	10 f0       	brcs	.+4      	; 0x41a <__utoa_common+0x14>
 416:	a4 1b       	sub	r26, r20
 418:	83 95       	inc	r24
 41a:	50 51       	subi	r21, 0x10	; 16
 41c:	b9 f7       	brne	.-18     	; 0x40c <__utoa_common+0x6>
 41e:	a0 5d       	subi	r26, 0xD0	; 208
 420:	aa 33       	cpi	r26, 0x3A	; 58
 422:	08 f0       	brcs	.+2      	; 0x426 <__utoa_common+0x20>
 424:	a9 5d       	subi	r26, 0xD9	; 217
 426:	a1 93       	st	Z+, r26
 428:	00 97       	sbiw	r24, 0x00	; 0
 42a:	79 f7       	brne	.-34     	; 0x40a <__utoa_common+0x4>
 42c:	b1 11       	cpse	r27, r1
 42e:	b1 93       	st	Z+, r27
 430:	11 92       	st	Z+, r1
 432:	cb 01       	movw	r24, r22
 434:	0c 94 1c 02 	jmp	0x438	; 0x438 <strrev>

00000438 <strrev>:
 438:	dc 01       	movw	r26, r24
 43a:	fc 01       	movw	r30, r24
 43c:	67 2f       	mov	r22, r23
 43e:	71 91       	ld	r23, Z+
 440:	77 23       	and	r23, r23
 442:	e1 f7       	brne	.-8      	; 0x43c <strrev+0x4>
 444:	32 97       	sbiw	r30, 0x02	; 2
 446:	04 c0       	rjmp	.+8      	; 0x450 <strrev+0x18>
 448:	7c 91       	ld	r23, X
 44a:	6d 93       	st	X+, r22
 44c:	70 83       	st	Z, r23
 44e:	62 91       	ld	r22, -Z
 450:	ae 17       	cp	r26, r30
 452:	bf 07       	cpc	r27, r31
 454:	c8 f3       	brcs	.-14     	; 0x448 <strrev+0x10>
 456:	08 95       	ret

00000458 <_exit>:
 458:	f8 94       	cli

0000045a <__stop_program>:
 45a:	ff cf       	rjmp	.-2      	; 0x45a <__stop_program>
