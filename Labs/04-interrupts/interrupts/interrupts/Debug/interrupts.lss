
interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa2  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000703  00000000  00000000  00000e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d1  00000000  00000000  0000152d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001900  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040c  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017d  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001f89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  88:	0c 94 14 01 	jmp	0x228	; 0x228 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <GPIO_config_output>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <GPIO_config_output+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <GPIO_config_output+0xa>
  a2:	24 2b       	or	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  a8:	fc 01       	movw	r30, r24
  aa:	40 81       	ld	r20, Z
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <GPIO_write_high+0xe>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <GPIO_write_high+0xa>
  ba:	24 2b       	or	r18, r20
  bc:	20 83       	st	Z, r18
  be:	08 95       	ret

000000c0 <GPIO_toggle>:
/**********************************************************************
 * Function: GPIO_toggle()
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name ^ (1<<pin_num);
  c0:	fc 01       	movw	r30, r24
  c2:	40 81       	ld	r20, Z
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <GPIO_toggle+0xe>
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <GPIO_toggle+0xa>
  d2:	24 27       	eor	r18, r20
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B
    GPIO_config_output(&DDRB, LED_D1);
  d8:	65 e0       	ldi	r22, 0x05	; 5
  da:	84 e2       	ldi	r24, 0x24	; 36
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D1);
  e2:	65 e0       	ldi	r22, 0x05	; 5
  e4:	85 e2       	ldi	r24, 0x25	; 37
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_high>
    GPIO_config_output(&DDRB, LED_D2);
  ec:	64 e0       	ldi	r22, 0x04	; 4
  ee:	84 e2       	ldi	r24, 0x24	; 36
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D2);
  f6:	64 e0       	ldi	r22, 0x04	; 4
  f8:	85 e2       	ldi	r24, 0x25	; 37
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_high>
    GPIO_config_output(&DDRB, LED_D3);
 100:	63 e0       	ldi	r22, 0x03	; 3
 102:	84 e2       	ldi	r24, 0x24	; 36
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D3);
 10a:	63 e0       	ldi	r22, 0x03	; 3
 10c:	85 e2       	ldi	r24, 0x25	; 37
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_high>
    GPIO_config_output(&DDRB, LED_D4);
 114:	62 e0       	ldi	r22, 0x02	; 2
 116:	84 e2       	ldi	r24, 0x24	; 36
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D4);
 11e:	62 e0       	ldi	r22, 0x02	; 2
 120:	85 e2       	ldi	r24, 0x25	; 37
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_high>

    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 128:	e1 e8       	ldi	r30, 0x81	; 129
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	80 83       	st	Z, r24
 132:	80 81       	ld	r24, Z
 134:	83 60       	ori	r24, 0x03	; 3
 136:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 138:	ef e6       	ldi	r30, 0x6F	; 111
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 142:	78 94       	sei
 144:	ff cf       	rjmp	.-2      	; 0x144 <main+0x6c>

00000146 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	4f 93       	push	r20
 156:	5f 93       	push	r21
 158:	6f 93       	push	r22
 15a:	7f 93       	push	r23
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
    static uint8_t step = 0;
    if (step == 0) {
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16c:	81 11       	cpse	r24, r1
 16e:	0b c0       	rjmp	.+22     	; 0x186 <__vector_13+0x40>
        GPIO_toggle(&PORTB, LED_D1);
 170:	65 e0       	ldi	r22, 0x05	; 5
 172:	85 e2       	ldi	r24, 0x25	; 37
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 60 00 	call	0xc0	; 0xc0 <GPIO_toggle>
        step++;
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 17e:	8f 5f       	subi	r24, 0xFF	; 255
 180:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 184:	40 c0       	rjmp	.+128    	; 0x206 <__vector_13+0xc0>
    }
    else if (step == 1 || step == 6) {
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	11 f0       	breq	.+4      	; 0x18e <__vector_13+0x48>
 18a:	86 30       	cpi	r24, 0x06	; 6
 18c:	b1 f4       	brne	.+44     	; 0x1ba <__vector_13+0x74>
        GPIO_toggle(&PORTB, LED_D1);
 18e:	65 e0       	ldi	r22, 0x05	; 5
 190:	85 e2       	ldi	r24, 0x25	; 37
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 60 00 	call	0xc0	; 0xc0 <GPIO_toggle>
        GPIO_toggle(&PORTB, LED_D2);
 198:	64 e0       	ldi	r22, 0x04	; 4
 19a:	85 e2       	ldi	r24, 0x25	; 37
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 60 00 	call	0xc0	; 0xc0 <GPIO_toggle>
        if (step == 1) {
 1a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	21 f4       	brne	.+8      	; 0x1b2 <__vector_13+0x6c>
            step++;
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1b0:	2a c0       	rjmp	.+84     	; 0x206 <__vector_13+0xc0>
        }
        else {
            step = 1;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1b8:	26 c0       	rjmp	.+76     	; 0x206 <__vector_13+0xc0>
        }
    }
    else if (step == 2 || step == 5) {
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	11 f0       	breq	.+4      	; 0x1c2 <__vector_13+0x7c>
 1be:	85 30       	cpi	r24, 0x05	; 5
 1c0:	81 f4       	brne	.+32     	; 0x1e2 <__vector_13+0x9c>
        GPIO_toggle(&PORTB, LED_D2);
 1c2:	64 e0       	ldi	r22, 0x04	; 4
 1c4:	85 e2       	ldi	r24, 0x25	; 37
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 60 00 	call	0xc0	; 0xc0 <GPIO_toggle>
        GPIO_toggle(&PORTB, LED_D3);
 1cc:	63 e0       	ldi	r22, 0x03	; 3
 1ce:	85 e2       	ldi	r24, 0x25	; 37
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 60 00 	call	0xc0	; 0xc0 <GPIO_toggle>
        step++;
 1d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1e0:	12 c0       	rjmp	.+36     	; 0x206 <__vector_13+0xc0>
    }
    else if (step == 3 || step == 4) {
 1e2:	83 50       	subi	r24, 0x03	; 3
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	78 f4       	brcc	.+30     	; 0x206 <__vector_13+0xc0>
        GPIO_toggle(&PORTB, LED_D3);
 1e8:	63 e0       	ldi	r22, 0x03	; 3
 1ea:	85 e2       	ldi	r24, 0x25	; 37
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 60 00 	call	0xc0	; 0xc0 <GPIO_toggle>
        GPIO_toggle(&PORTB, LED_D4);
 1f2:	62 e0       	ldi	r22, 0x02	; 2
 1f4:	85 e2       	ldi	r24, 0x25	; 37
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 60 00 	call	0xc0	; 0xc0 <GPIO_toggle>
        step++;
 1fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 200:	8f 5f       	subi	r24, 0xFF	; 255
 202:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    } 
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	bf 91       	pop	r27
 20c:	af 91       	pop	r26
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	7f 91       	pop	r23
 214:	6f 91       	pop	r22
 216:	5f 91       	pop	r21
 218:	4f 91       	pop	r20
 21a:	3f 91       	pop	r19
 21c:	2f 91       	pop	r18
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <_exit>:
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>
